#define _CRT_SECURE_NO_DEPRECATE
#include <stdio.h>
#include <locale.h>
#define N 1000
#define q 1.3
#define q1 3.4


double* full_elements(double* ptr_array, int n);
double func(double x);
int put_elements(double* ptr_array, int n);
double sum_elements(double* ptr_array, int begin, int end);
int find_element(double* ptr_array, int n, double element);
int function(double* ptr_array, int n, double A);

void main() {
    setlocale(LC_ALL, "RUS");
    double array[N];
    int size, begin, end;
    int i = 0;
    double sump = 0, sumot = 0, chisp = 0, chisot = 0, element, A;
    printf("1).Введите размер массива = ");
    scanf("%d", &size);
    full_elements(array, size);
    put_elements(array, size);
    printf("\n");
    printf("2).Введите начало и конец отрезка суммирования элементов через пробел:");
    scanf("%d %d", &begin, &end);
    printf("Сумма всех элементов на заданном отрезке = %lf:\n\n", sum_elements(array, begin, end));
    printf("3).Введите элемент, индекс которого необходимо найти:");
    scanf("%lf", &element);
    printf("Элементу %lf принадлежит индекс %d\n\n", element, find_element(array, size, element));
    printf("4).Введите значение для нахождения индекса минимального положительного элемента больше введённого: ");
    scanf("%lf", &A);
    if (function(array, size, A) != -1)
    printf("Индекс наименьшего положительного элемента, который больше %lf, равен %d\n", A, function(array, size, A));
    else
        printf("Наименьшего положительного элемента, который больше %lf, нет\n", A);
}

double* full_elements(double* ptr_array, int n) {
    double a;
    int i = 0;
    for (a = q; i < n; a += ((q1 - q) / n), i++) {
        ptr_array[i] = func(a);
    }
}

int put_elements(double* ptr_array, int n) {
    for (int i = 0; i < n; i++) {
        printf("A[%d] = %lf\n", i, ptr_array[i]);
    }
}

double sum_elements(double* ptr_array, int begin, int end) {
    double sum = 0;
    for (int i = 0; i <= end; i++) {
        if (i >= begin && i <= end) {
            sum = sum + ptr_array[i];
        }
    }
    return sum;
}

int find_element(double* ptr_array, int n, double element) {
    for (int i = 0; i < n; i++) {
        if (ptr_array[i] == element) {
            return i;
        }
    }
    return -1;
}

int function(double* ptr_array, int n, double A) {
    double minpl1 = -100;
    int w;
    int max = ptr_array[0];
    for (int i = 1; i < n; i++) {
        if (ptr_array[i] > max)
            max = ptr_array[i];
    }

    for (int i = 0; i < n, minpl1 < 0; i++) {
        if (ptr_array[i] > 0) {
            minpl1 = ptr_array[i];
            w = i;
        }
    }
    if (A < max) {
        for (int i = 0; i < n; i++) {
            if ((ptr_array[i] >= 0) && (ptr_array[i] < minpl1) && (ptr_array[i] > A)) {
                minpl1 = ptr_array[i];
                w = i;
            }
        }
        return w;
    }
    else {
        w = -1;
        return w;
    }


}

double func(double x) {
    double result;
    result = 5 * pow(x, 3) + 2 * pow(x, 2) - 15 * x - 6;
    return result;
}
