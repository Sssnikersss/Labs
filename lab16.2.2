//Вариант 7

#define _CRT_SECURE_NO_DEPRECATE
#include <stdio.h>
#include <locale.h>
#include <malloc.h>
#include <stdlib.h.>


double* full_elements(double* ptr_array, int N);
double func(double x);
int put_elements(double* ptr_array, int N);
double* insert(double* ptr_array, int* N, int k, int num);

void main() {
    setlocale(LC_ALL, "RUS");
    double* ptr_array;
    int N;
    double num = -999;

    printf("Введите размер массива: ");
    scanf("%d", &N);
    printf("\n");
    int* p = &N;

    ptr_array = (double*)malloc(N * sizeof(double));
    if (ptr_array == NULL) {
        puts("error");
        return -1;
    }

    full_elements(ptr_array, N);
    printf("     Массив:\n");
    put_elements(ptr_array, N);
    printf("\n");
    //Поиск индекса минимального значения:
    int imin = 0;
    for (int i = 1; i < N; i++) {
        if (ptr_array[i] < ptr_array[imin])
            imin = i;
    }
    printf("Индекс минимального элемента: %d\n\n", imin);

    insert(ptr_array, p, imin, num);
    printf("     Массив.1:\n");
    put_elements(ptr_array, N);

    free(ptr_array);
}

double* full_elements(double* ptr_array, int N) {
    double x = 1.3;
    double dx = (3.4 - 1.3) / N;
    for (int i = 0; i < N; i++) {
        ptr_array[i] = func(x);
        x += dx;
    }
}

double func(double x) {
    double result;
    result = 5 * pow(x, 3) + 2 * pow(x, 2) - 15 * x - 6;
    return result;
}

int put_elements(double* ptr_array, int N) {
    for (int i = 0; i < N; i++) {
        printf("A[%d] = %lf\n", i, ptr_array[i]);
    }
}

double* insert(double* ptr_array, int* N, int k, int num) {
    int size_n = (*N) + 2;
    if (ptr_array == NULL) return NULL;
    double* ptr_array_n = (double*)realloc(ptr_array, size_n * sizeof(double));
    
    for (int i = size_n - 1; i > k; i--)
        ptr_array[i] = ptr_array[i - 1];
    ptr_array[k] = num;
    *N = size_n;

    for (int i = size_n - 1; i > k + 2; i--)
        ptr_array[i] = ptr_array[i - 1];
    ptr_array[k + 2] = num;
    *N = size_n;

    return ptr_array;
}

/*if (ptr_array_n == NULL) return ptr_array;
ptr_array = ptr_array_n;*/
