#define _CRT_SECURE_NO_WARNINGS
#define _USE_MATH_DEFINES 
#include <malloc.h>
#include <stdio.h>
#include <locale.h>
#include <string.h>


struct sotrudnik
{
	char cod[20];
	char dolgnost[30];
	int startvremy_chas;
	int startvremy_min;
	int finvremy_chas;
	int finvremy_min;
	float prodolg;
} *st;

struct sotrudnik Add(struct sotrudnik* st, int A) //ВВОД БАЗЫ ДАННЫХ
{
	for (int i = 0; i < A; i++)
	{
		printf("Введите код сотрудника: ");
		scanf("%s", st->cod);
		printf("Введите должность сотрудника: ");
		scanf("%s", &st->dolgnost);
		printf("Введите время начала работы - часы и минуты (два числа через пробел): ");
		scanf("%d %d", &st->startvremy_chas, &st->startvremy_min);
		printf("Введите время окончания работы - часы и минуты (два числа через пробел): ");
		scanf("%d %d", &st->finvremy_chas, &st->finvremy_min);
		printf("\n");
		st++;
	}
	return *st;
}

struct sotrudnik Poisk(struct sotrudnik* st, int A)//ПОИСК СТРУКТУРЫ ПО ЗАДАННОМУ КРИТЕРИЮ
{
	int k;
	float mch;
	int zadch1, zadmin1, zadch2, zadmin2;
	printf("По какому критерию вы хотите осуществить поиск: \n");
	printf("(1) - работавшие менее заданного количества часов в день.\n");
	printf("(2) - работавшие в заданном интервале времени.\n");
	scanf("%d", &k);
	if (k == 1)
	{
		printf("Введите количество часов: ");
		scanf("%f", &mch);
		for (int j = 0; j < A; j++)
		{
			if ((st + j)->prodolg < mch)
			{
				printf("Код сотрудника: %s\n", (st + j)->cod);
				printf("Должность сотрудника: %s\n", (st + j)->dolgnost);
				printf("Время начала работы (часы и минуты): %d:%d\n", (st + j)->startvremy_chas, (st + j)->startvremy_min);
				printf("Продолжительность работы в долях часа: %f\n", (((float)(st + j)->finvremy_chas * 60 + (float)(st + j)->finvremy_min) - ((float)(st + j)->startvremy_chas * 60 + (float)(st + j)->startvremy_min)) / 60);
				puts("----------------------------------------------------");
			}
		}

	}
	if (k == 2)
	{
		printf("Введите начало работы - часы и минуты (два числа через пробел): ");
		scanf("%d %d", &zadch1, &zadmin1);
		printf("Введите окончание работы - часы и минуты (два числа через пробел): ");
		scanf("%d %d", &zadch2, &zadmin2);
		for (int j = 0; j < A; j++)
		{
			if (((st + j)->startvremy_chas >= zadch1) && ((st + j)->finvremy_chas <= zadch2))
			{
				if (((st + j)->startvremy_min >= zadmin1) && ((st + j)->finvremy_min <= zadmin2))
				{
					printf("Код сотрудника: %s\n", (st + j)->cod);
					printf("Должность сотрудника: %s\n", (st + j)->dolgnost);
					printf("Время начала работы (часы и минуты): %d:%d\n", (st + j)->startvremy_chas, (st + j)->startvremy_min);
					printf("Продолжительность работы в долях часа: %f\n", (((float)(st + j)->finvremy_chas * 60 + (float)(st + j)->finvremy_min) - ((float)(st + j)->startvremy_chas * 60 + (float)(st + j)->startvremy_min)) / 60);
					puts("----------------------------------------------------");
				}
			}
		}
		st++;
	}
	return *st;
}

struct sotrudnik Sort1(struct sotrudnik* st, int A);
struct sotrudnik Sort2(struct sotrudnik* st, int A);
int writefile(struct sotrudnik* st, int A, char* fileName);//Запись в файл
int readfile(char* fileName);//Чтение из файла
void Print(struct sotrudnik* st, int A);//Печать базы данных


int main() //НАЧАЛО ОСНОВНОЙ ФУНКЦИИ**************************************************************************************
{
	int A;
	setlocale(LC_ALL, "RUS");//устанавливаем русскую раскладку
	system("chcp 1251");
	system("cls");
	char* fileName = "sotrudnik.txt";

	printf("Введите количество сотрудников: ");
	scanf("%d", &A);
	printf("\n");

	st = malloc(A * sizeof(int));//выделение памяти

	int sort;
	int menu;
	int cycle = 1; //постоянная для создания цикла
	while (cycle == 1)//меню базы данных
	{
		printf("\t  Меню.\n");
		printf("0. Выход из программы.\n");
		printf("1. Ввод базы данных.\n");
		printf("2. Печать базы данных.\n");
		printf("3. Поиск структуры по критерию.\n");
		printf("4. Сортировка по критерию.\n");
		printf("5. Добавить данные в файл.\n");
		printf("6. Прочесть данные из файла.\n\n");
		printf("Введите номер пункта меню: ");
		scanf("%d", &menu);
		printf("\n");

		switch (menu)
		{
		case 0:
			break;
		case 1://Ввод базы данных
			Add(st, A);
			break;
		case 2://Печать базы данных
			Print(st, A);
			break;
		case 3://Поиск структуры по критерию
			Poisk(st, A);
			break; 
		case 4://Сортировка
			printf("По какому критерию вы хотите осуществить сортировку: \n");
			printf("(1) - Продолжительность работы за первую половину дня.\n");
			printf("(2) - Продолжительность работы за вторую половину дня.\n");
			scanf("%d", &sort);
			if (sort == 1) {
				Sort1(st, A);
				Print(st, A);
			}
			else if (sort == 2) {
				Sort2(st, A);
				Print(st, A);
			}
			else
				printf("Неизвестная команда\n");
			break;
		case 5://Добавление данных в файл
			writefile(st, A, fileName);
			break;
		case 6://Чтение данных из файла
			readfile(fileName);
			break;
		default:
			printf("Неизвестная команда\n");
			break;
		}

		printf("Продолжить работу?(1 - да, 2 - нет): ");
		scanf("%d", &cycle);
		printf("\n");

	}

	free(st);
	system("pause");
	return 7;
}//КОНЕЦ ОСНОВНОЙ ФУНКЦИИ**************************************************************************************

void Print(struct sotrudnik* st, int A)//Печать базы данных
{
	for (int j = 0; j < A; j++)
	{
		printf("Код сотрудника: %s\n", st->cod);
		printf("Должность сотрудника: %s\n", st->dolgnost);
		printf("Время начала работы (часы и минуты): %d:%d\n", st->startvremy_chas, st->startvremy_min);
		printf("Продолжительность работы в долях часа: %f\n", (((float)st->finvremy_chas * 60 + (float)st->finvremy_min) - ((float)st->startvremy_chas * 60 + (float)st->startvremy_min)) / 60);
		puts("----------------------------------------------------");
		st++;
	}
}

struct sotrudnik Sort1(struct sotrudnik* st, int A) {//Сортировка по продолжительности работы за первую половину дня

	struct sotrudnik tmp;

	for (int i = 0; i < A - 1; i++) {
		for (int j = 0; j < A - i - 1; j++)
		{
			if ((720 - (st[j].startvremy_chas * 60 + st[j].startvremy_min)) > (720 - (st[j + 1].startvremy_chas * 60 + st[j + 1].startvremy_min)))
			{
				tmp = st[j];
				st[j] = st[j + 1];
				st[j + 1] = tmp;
			}
		}
	}
	return *st;
}

struct sotrudnik Sort2(struct sotrudnik* st, int A) {//Сортировка по продолжительности работы за вторую половину дня

	struct sotrudnik tmp;

	for (int i = 0; i < A - 1; i++) {
		for (int j = 0; j < A - i - 1; j++)
		{
			if (1)
			{
				tmp = st[j];
				st[j] = st[j + 1];
				st[j + 1] = tmp;
			}
		}
	}
	return *st;
}

int writefile(struct sotrudnik* st, int A, char* fileName) {
	FILE* fp;
	if ((fp = fopen(fileName, "a+")) == NULL)
	{
		printf("Ошибка открытия файла для записи\n");			
		return 0;
	}
	for (int i = 0; i < A; i++) {
		fprintf(fp, "%20s\t\t%s\t\t\t%d:%d\t\t\t%d:%d \n", st->cod, st->dolgnost, st->startvremy_chas, st->startvremy_min, st->finvremy_chas, st->finvremy_min);
	}
	fclose(fp);
	printf("Данные успешно записаны в файл!\n");
	return 1;
}

int readfile(char* fileName) {
	FILE* fp;
	char fileLine[500];
	if ((fp = fopen(fileName, "r")) == NULL)
	{
		printf("Произошла ошибка при открытии файла\n");
			return 0;
	}
	printf("Файл успешно открыт!\n");
	printf("====================\n");
	printf("Начинаем чтение файла...\n");
	printf("=======================\n\n");
	printf("Код сотрудника\tДолжность сотрудника\tВремя начала работы (часы и минуты)\tВремя окончания работы (часы и минуты)\n");
	while (!feof(fp)) 
	{
		fgets(fileLine, 500, fp);
		if (!feof(fp)) 
		{
			puts(fileLine);
		}
	}
	fclose(fp);
	return(1);
}
