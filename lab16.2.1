//Вариант 7

#define _CRT_SECURE_NO_DEPRECATE
#include <stdio.h>
#include <locale.h>
#include <malloc.h>
#include <stdlib.h.>


double* full_elements(double* ptr_array, int N);
double func(double x);
int put_elements(double* ptr_array, int N);
int delete_k(double* ptr_array, int N, int k);


void main() {
    setlocale(LC_ALL, "RUS");
    double* ptr_array;
    int N;

    printf("Введите размер массива: ");
    scanf("%d", &N);
    printf("\n");

    ptr_array = (double*)malloc(N * sizeof(double));
    if (ptr_array == NULL) {
        puts("error");
        return -1;
    }

    full_elements(ptr_array, N);
    printf("     Массив:\n");
    put_elements(ptr_array, N);
    printf("\n");
    //Поиск индекса минимального значения:
    int imin = 0;
    for (int i = 1; i < N; i++) {
        if (ptr_array[i] < ptr_array[imin])
            imin = i;
    }
    printf("Индекс минимального элемента: %d\n\n", imin);
    
    delete_k(ptr_array, N, imin);
    printf("Массив.1 (без минимального элемента):\n");
    put_elements(ptr_array, N);
    

    //Поиск индекса максимального значения:
    int imax = 0;
    for (int i = 1; i < N; i++) {
        if (ptr_array[i] > ptr_array[imax])
            imax = i;
    }
    printf("\nИндекс максимального элемента: %d\n\n", imax);

    delete_k(ptr_array, N, imax);
    printf("Массив.2 (без минимального и максимального элементов):\n");
    put_elements(ptr_array, N);

    free(ptr_array);
}

double* full_elements(double* ptr_array, int N) {
    double x = 1.3;
    double dx = (3.4 - 1.3) / N;
    for (int i = 0; i < N; i++) {
        ptr_array[i] = func(x);
        x += dx;
    }
}

double func(double x) {
    double result;
    result = 5 * pow(x, 3) + 2 * pow(x, 2) - 15 * x - 6;
    return result;
}

int put_elements(double* ptr_array, int N) {
    for (int i = 0; i < N; i++) {
        printf("A[%d] = %lf\n", i, ptr_array[i]);
    }
}

int delete_k(double* ptr_array, int N, int k) {
    int n = N - 1;
    for (int i = k; i < (N - 1); i++) 
        ptr_array[i] = ptr_array[i + 1];
    ptr_array[N - 1] = 0;
    return n;
}
